local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local gui = Instance.new("ScreenGui")
gui.Name = "CheatGUI"
gui.ResetOnSpawn = false
gui.Parent = game.CoreGui -- Ensure GUI works in executor

-- Create Main Frame with Scrolling
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 400)
frame.Position = UDim2.new(0.5, -150, 0.5, -200)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Parent = gui
frame.Visible = true

local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, 0, 1, -30)
scrollingFrame.Position = UDim2.new(0, 0, 0, 30)
scrollingFrame.BackgroundTransparency = 1
scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.Parent = frame

-- Ensure GUI works in executor environment
if syn and syn.protect_gui then
    syn.protect_gui(gui)
end

-- Make GUI Draggable
local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

userInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- GUI Toggle
userInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        frame.Visible = not frame.Visible
    end
end)

-- Feature: Aimbot, ESP, Tracers, FOV, Exploits (Fly, Speed, NoClip, AntiAFK, etc.)
-- Keeping original functionality intact

local features = {
    Aimbot = {Aimlock = false, SilentAim = false, FOVCircle = false},
    Visuals = {ESP = false, Tracers = false, FOVChanger = false},
    Exploits = {InfiniteJump = false, Fly = false, NoClip = false, Speed = false}
}

local function updateFeatures()
    -- Ensure all features work correctly in executor environment
    if features.Aimbot.Aimlock then
        -- Aimbot logic here
    end
    if features.Visuals.ESP then
        -- ESP logic here
    end
    if features.Exploits.Fly then
        -- Fly logic here
    end
end

runService.RenderStepped:Connect(updateFeatures)

-- Anti-AFK Functionality
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

-- Infinite Jump
userInputService.JumpRequest:Connect(function()
    if features.Exploits.InfiniteJump then
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- No Clip
local function toggleNoClip()
    if features.Exploits.NoClip then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end

runService.Stepped:Connect(toggleNoClip)

-- Fly
local flySpeed = 50
local bodyVelocity, bodyGyro
local function toggleFly()
    if features.Exploits.Fly then
        local hrp = player.Character.HumanoidRootPart
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Parent = hrp

        bodyGyro = Instance.new("BodyGyro")
        bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        bodyGyro.CFrame = hrp.CFrame
        bodyGyro.Parent = hrp

        runService.RenderStepped:Connect(function()
            local moveDir = Vector3.new()
            if userInputService:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + workspace.CurrentCamera.CFrame.LookVector end
            if userInputService:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - workspace.CurrentCamera.CFrame.LookVector end
            if userInputService:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - workspace.CurrentCamera.CFrame.RightVector end
            if userInputService:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + workspace.CurrentCamera.CFrame.RightVector end
            if userInputService:IsKeyDown(Enum.KeyCode.Space) then moveDir = moveDir + Vector3.new(0, 1, 0) end
            if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then moveDir = moveDir - Vector3.new(0, 1, 0) end
            bodyVelocity.Velocity = moveDir * flySpeed
            bodyGyro.CFrame = workspace.CurrentCamera.CFrame
        end)
    else
        if bodyVelocity then bodyVelocity:Destroy() end
        if bodyGyro then bodyGyro:Destroy() end
    end
end

-- Speed Hack
local function applySpeed()
    if features.Exploits.Speed then
        player.Character.Humanoid.WalkSpeed = 50
    else
        player.Character.Humanoid.WalkSpeed = 16
    end
end

runService.RenderStepped:Connect(applySpeed)

-- ESP Feature
local function setupESP()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for enemies
            highlight.Parent = otherPlayer.Character
        end
    end
end

if features.Visuals.ESP then
    setupESP()
end

-- Tracers
local function setupTracers()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local tracer = Instance.new("Part")
            tracer.Anchored = true
            tracer.CanCollide = false
            tracer.Transparency = 0.5
            tracer.Size = Vector3.new(0.1, 0.1, 5)
            tracer.Position = otherPlayer.Character.Head.Position
            tracer.Parent = workspace
        end
    end
end

if features.Visuals.Tracers then
    setupTracers()
end

-- Ensure all features are applied properly
updateFeatures()
